exo = read.csv('oec.csv')
View(exo)
ex = is.na(exo$RightAscension) | is.na(exo$Declination) | is.na(exo$DistFromSunParsec)
exo = exo[!ex,]
install.packages('sphereplot')
library('sphereplot')
exo$RightAscension[1]
exo$Declination[1]
rgl.sphcirc(CrossEq = exo$RightAscension[1], PeakDec = exo$Declination[1], radius = exo$DistFromSunParsec)
exo$RightAscension = as.character(exo$RightAscension)
exo = read.csv('oec.csv')
exo$RightAscension
?rgl.sphcirc
exo$Declination
rgl.sphcirc(CrossEq = 12 07 21, PeakDec = -00 01 54, radius = 10)
rgl.sphcirc(CrossEq = "12 07 21", PeakDec = "-00 01 54", radius = 10)
rgl.sphcirc(CrossEq = 12,07,21, PeakDec = -00,01,54, radius = 10)
A = 12 * 15 + 07 * 0.25 + 21 * 0.004166
ABS
abs
abs(-00)
B = abs(-00) + 01 / 6 + 54 / 3600 * -1
C = 10
X = (C * cos(B)) * cos(A)
Y = (C * cos(B)) * sin(A)
Z = C * sin(B)
library(rgl)
plot3d(x=X,  y=Y,  z=Z)
exo$Declination = as.character(exo$Declination)
?strsplit
strsplit(exo$RightAscension, " ")
exo$RightAscension
strsplit(exo$RightAscension, split = " ")
exo$RightAscension = as.character(exo$RightAscension)
strsplit(exo$RightAscension, split = " ")
strsplit(exo$RightAscension, split = " ")[1]
strsplit(exo$RightAscension, split = " ")[[1]][1]
View(exo)
i=1
while (i<length(exo$RightAscension)) {
exo$A = strsplit(exo$RightAscension, split = " ")[[i]][1]
i=i+1
}
View(exo)
strsplit(exo$RightAscension, split = " ")[[i]][1]
exo$A = 0
i=1
exo$A = 0
while (i<length(exo$RightAscension)) {
exo$A[i] = strsplit(exo$RightAscension, split = " ")[[i]][1]
i=i+1
}
View(exo)
strsplit(exo$RightAscension, split = " ")[[i]]
temp = strsplit(exo$RightAscension, split = " ")[[i]]
temp
temp[1]
(temp[1]*15) + (temp[2]*0.25) + (temp[3]*15)
temp[1]
(as.numeric(temp[1]*15))
(as.numeric(temp[1])*15)
(as.numeric(temp[1])*15) + (as.numeric(temp[2])*0.25) + (as.numeric(temp[3])*15)
temp_d = strsplit(exo$Declination, split = " ")[[i]]
abs(as.numeric(temp_d[1])) + (as.numeric(temp_d[2])/60) + (as.numeric(temp_d[3])/3600)
sign(as.numeric(temp_d[1]))
exo$B[i] = (abs(as.numeric(temp_d[1])) + (as.numeric(temp_d[2])/60) + (as.numeric(temp_d[3])/3600)) * sign(as.numeric(temp_d[1]))
exo$A[i] = (as.numeric(temp[1])*15) + (as.numeric(temp[2])*0.25) + (as.numeric(temp[3])*15)
exo$B[i] = (abs(as.numeric(temp_d[1])) + (as.numeric(temp_d[2])/60) + (as.numeric(temp_d[3])/3600)) * sign(as.numeric(temp_d[1]))
i=1
exo$A = 0
while (i<length(exo$RightAscension)) {
temp = strsplit(exo$RightAscension, split = " ")[[i]]
temp_d = strsplit(exo$Declination, split = " ")[[i]]
exo$A[i] = (as.numeric(temp[1])*15) + (as.numeric(temp[2])*0.25) + (as.numeric(temp[3])*15)
exo$B[i] = (abs(as.numeric(temp_d[1])) + (as.numeric(temp_d[2])/60) + (as.numeric(temp_d[3])/3600)) * sign(as.numeric(temp_d[1]))
i=i+1
}
exo$X[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * cos(exo$A[i])
exo$Y[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * sin(exo$A[i])
exo$Z[i] = exo$DistFromSunParsec[i] * sin(exo$B[i])
i=1
exo$A = 0
while (i<length(exo$RightAscension)) {
temp = strsplit(exo$RightAscension, split = " ")[[i]]
temp_d = strsplit(exo$Declination, split = " ")[[i]]
exo$A[i] = (as.numeric(temp[1])*15) + (as.numeric(temp[2])*0.25) + (as.numeric(temp[3])*15)
exo$B[i] = (abs(as.numeric(temp_d[1])) + (as.numeric(temp_d[2])/60) + (as.numeric(temp_d[3])/3600)) * sign(as.numeric(temp_d[1]))
exo$X[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * cos(exo$A[i])
exo$Y[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * sin(exo$A[i])
exo$Z[i] = exo$DistFromSunParsec[i] * sin(exo$B[i])
i=i+1
}
View(exo)
exo = read.csv('oec.csv')
ex = is.na(exo$RightAscension) | is.na(exo$Declination) | is.na(exo$DistFromSunParsec)
exo = exo[!ex,]
exo$RightAscension = as.character(exo$RightAscension)
exo$Declination = as.character(exo$Declination)
i=1
exo$A = 0
while (i<length(exo$RightAscension)) {
temp = strsplit(exo$RightAscension, split = " ")[[i]]
temp_d = strsplit(exo$Declination, split = " ")[[i]]
exo$A[i] = (as.numeric(temp[1])*15) + (as.numeric(temp[2])*0.25) + (as.numeric(temp[3])*15)
exo$B[i] = (abs(as.numeric(temp_d[1])) + (as.numeric(temp_d[2])/60) + (as.numeric(temp_d[3])/3600)) * sign(as.numeric(temp_d[1]))
exo$X[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * cos(exo$A[i])
exo$Y[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * sin(exo$A[i])
exo$Z[i] = exo$DistFromSunParsec[i] * sin(exo$B[i])
i=i+1
}
plot3d(x=exo$X,  y=exo$Y,  z=exo$Z)
library(scatterplot3d)
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16, highlight.3d=TRUE, type="h", main="3D Scatterplot")
?scatterplot3d
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=5, highlight.3d=TRUE, type="h", main="3D Scatterplot")
?scatterplot3d
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16, highlight.3d=TRUE, type="h", main="3D Scatterplot", axis = F)
?scatterplot3d
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16, highlight.3d=TRUE, type="h", main="3D Scatterplot", axis = F, angle = 0)
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16, highlight.3d=TRUE, type="h", main="3D Scatterplot", axis = F, angle = 90)
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16, highlight.3d=TRUE, type="h", main="3D Scatterplot", axis = F, angle = 1)
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16, highlight.3d=TRUE, type="h", main="3D Scatterplot", axis = F, angle = 5)
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16, highlight.3d=TRUE, type="h", main="3D Scatterplot", axis = F, angle = 15)
?scatterplot3d
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16, highlight.3d=TRUE, type="p", main="3D Scatterplot", axis = F, angle = 15, bg = 'black')
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16, highlight.3d=TRUE, type="p", main="3D Scatterplot", axis = F, angle = 15)
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16, highlight.3d=TRUE, type="p", main="3D Scatterplot", axis = F, angle = 15, size = 10)
?scatterplot3d
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16, highlight.3d=TRUE, type="p", main="3D Scatterplot", axis = F, angle = 15, cex.symbols = 1)
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16, highlight.3d=TRUE, type="p", main="3D Scatterplot", axis = F, angle = 15, cex.symbols = 10)
exo$RadiusJpt
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16, highlight.3d=TRUE, type="p", main="3D Scatterplot", axis = F, angle = 15, cex.symbols = exo$RadiusJpt)
ex = is.na(exo$RightAscension) | is.na(exo$Declination) | is.na(exo$DistFromSunParsec) | is.na(exo$RadiusJpt)
exo = exo[!ex,]
exo$RightAscension = as.character(exo$RightAscension)
exo$Declination = as.character(exo$Declination)
i=1
exo$A = 0
while (i<length(exo$RightAscension)) {
temp = strsplit(exo$RightAscension, split = " ")[[i]]
temp_d = strsplit(exo$Declination, split = " ")[[i]]
exo$A[i] = (as.numeric(temp[1])*15) + (as.numeric(temp[2])*0.25) + (as.numeric(temp[3])*15)
exo$B[i] = (abs(as.numeric(temp_d[1])) + (as.numeric(temp_d[2])/60) + (as.numeric(temp_d[3])/3600)) * sign(as.numeric(temp_d[1]))
exo$X[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * cos(exo$A[i])
exo$Y[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * sin(exo$A[i])
exo$Z[i] = exo$DistFromSunParsec[i] * sin(exo$B[i])
i=i+1
}
View(exo)
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
#highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
angle = 15,
cex.symbols = exo$RadiusJpt
color = exo$TypeFlag)
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
#highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
angle = 15,
cex.symbols = exo$RadiusJpt,
color = exo$TypeFlag)
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
#highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
angle = 15,
cex.symbols = exo$RadiusJpt,
color = as.factor(exo$TypeFlag))
?scatterplot3d
exo$colour = 'black'
table(exo$TypeFlag)
exo$colour = 'black'
exo$colour[exo$TypeFlag == 1] = 'green'
exo$colour[exo$TypeFlag == 2] = 'blue'
exo$colour[exo$TypeFlag == 3] = 'red'
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
#highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
angle = 15,
cex.symbols = exo$RadiusJpt,
color = as.factor(exo$colour))
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
angle = 15,
cex.symbols = exo$RadiusJpt,
color = as.factor(exo$colour))
library('animation')
y=0
y=0
saveGIF(while (i < 360) {
s3d <- scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
angle = y,
cex.symbols = exo$RadiusJpt,
color = as.factor(exo$colour))
y=y+1
}, movie.name = "exo.gif", interval = 0.25, convert = "convert", ani.width = 800,
ani.height = 800)
y=0
saveGIF(while (i < 360) {
plot(scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
angle = y,
cex.symbols = exo$RadiusJpt,
color = as.factor(exo$colour)))
y=y+1
}, movie.name = "exo.gif", interval = 0.25, convert = "convert", ani.width = 800,
ani.height = 800)
y=0
saveGIF(while (y < 360) {
plot(scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
angle = y,
cex.symbols = exo$RadiusJpt,
color = as.factor(exo$colour)))
y=y+1
}, movie.name = "exo.gif", interval = 0.25, convert = "convert", ani.width = 800,
ani.height = 800)
plot(scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
angle = y,
cex.symbols = exo$RadiusJpt,
color = as.factor(exo$colour)))
scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
angle = y,
cex.symbols = exo$RadiusJpt,
color = as.factor(exo$colour))
y=0
saveGIF(while (y < 360) {
scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
angle = y,
cex.symbols = exo$RadiusJpt,
color = as.factor(exo$colour))
y=y+1
}, movie.name = "exo.gif", interval = 0.25, convert = "convert", ani.width = 800,
ani.height = 800)
y=0
saveGIF(while (y < 360) {
scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
angle = y,
cex.symbols = exo$RadiusJpt,
color = as.factor(exo$colour))
y=y+1
}, movie.name = "exo.gif", interval = 0.1, convert = "convert", ani.width = 800,
ani.height = 800)
?scatterplot3d
scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = T,
grid = T,
angle = y,
cex.symbols = exo$RadiusJpt,
color = as.factor(exo$colour))
scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
grid = T,
angle = y,
cex.symbols = exo$RadiusJpt,
color = as.factor(exo$colour))
scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
grid = F,
angle = y,
cex.symbols = exo$RadiusJpt,
color = as.factor(exo$colour))
?scatterplot3d
scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
grid = F,
box = T,
angle = y,
cex.symbols = exo$RadiusJpt,
color = as.factor(exo$colour))
?scatterplot3d
y=0
scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="3D Scatterplot",
axis = F,
grid = F,
box = T,
angle = y,
cex.symbols = exo$RadiusJpt,
color = as.factor(exo$colour))
View(exo)
View(exo)
exo[exo$DistFromSunParsec < 2000,]
exo = exo[exo$DistFromSunParsec < 2000,]
i=1
exo$A = 0
while (i<length(exo$RightAscension)) {
temp = strsplit(exo$RightAscension, split = " ")[[i]]
temp_d = strsplit(exo$Declination, split = " ")[[i]]
exo$A[i] = (as.numeric(temp[1])*15) + (as.numeric(temp[2])*0.25) + (as.numeric(temp[3])*15)
exo$B[i] = (abs(as.numeric(temp_d[1])) + (as.numeric(temp_d[2])/60) + (as.numeric(temp_d[3])/3600)) * sign(as.numeric(temp_d[1]))
exo$X[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * cos(exo$A[i])
exo$Y[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * sin(exo$A[i])
exo$Z[i] = exo$DistFromSunParsec[i] * sin(exo$B[i])
i=i+1
}
scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="Local ",
axis = F,
grid = F,
box = T,
angle = y,
cex.symbols = exo$RadiusJpt)
y=0
saveGIF(while (y < 360) {
scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="Local ",
axis = F,
grid = F,
box = T,
angle = y,
cex.symbols = exo$RadiusJpt)
y=y+1
}, movie.name = "exo.gif", interval = 0.1, convert = "convert", ani.width = 800,
ani.height = 800)
scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="Local Neighbourhood",
axis = F,
grid = F,
box = T,
angle = y,
cex.symbols = exo$RadiusJpt)
library('animation')
library('scatterplot3d')
exo = read.csv('oec.csv')
#Get rid of planets with missing data...
ex = is.na(exo$RightAscension) | is.na(exo$Declination) | is.na(exo$DistFromSunParsec) | is.na(exo$RadiusJpt)
exo = exo[!ex,]
#Get rid of the planets wtih really extreme distances...
exo = exo[exo$DistFromSunParsec < 2000,]
#Change to characters...
exo$RightAscension = as.character(exo$RightAscension)
exo$Declination = as.character(exo$Declination)
#Strip out relevant data and convert from RA and declination to cartesian coordiates...
i=1
exo$A = 0
while (i<length(exo$RightAscension)) {
temp = strsplit(exo$RightAscension, split = " ")[[i]]
temp_d = strsplit(exo$Declination, split = " ")[[i]]
exo$A[i] = (as.numeric(temp[1])*15) + (as.numeric(temp[2])*0.25) + (as.numeric(temp[3])*15)
exo$B[i] = (abs(as.numeric(temp_d[1])) + (as.numeric(temp_d[2])/60) + (as.numeric(temp_d[3])/3600)) * sign(as.numeric(temp_d[1]))
exo$X[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * cos(exo$A[i])
exo$Y[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * sin(exo$A[i])
exo$Z[i] = exo$DistFromSunParsec[i] * sin(exo$B[i])
i=i+1
}
#Plot the scatterplot and produce an animation (changing the angle with each image)...
y=0
saveGIF(while (y < 360) {
scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="Local Neighbourhood",
axis = F,
grid = F,
box = T,
angle = y,
cex.symbols = exo$RadiusJpt)
y=y+1
}, movie.name = "exo.gif", interval = 0.1, convert = "convert", ani.width = 800,
ani.height = 800)
library('animation')
library('scatterplot3d')
exo = read.csv('oec.csv')
#Get rid of planets with missing data...
ex = is.na(exo$RightAscension) | is.na(exo$Declination) | is.na(exo$DistFromSunParsec) | is.na(exo$RadiusJpt)
exo = exo[!ex,]
#Get rid of the planets wtih really extreme distances...
exo = exo[exo$DistFromSunParsec < 2000,]
#Change to characters...
exo$RightAscension = as.character(exo$RightAscension)
exo$Declination = as.character(exo$Declination)
#Strip out relevant data and convert from RA and declination to cartesian coordiates...
#Conversion taken from http://fmwriters.com/Visionback/Issue14/wbputtingstars.htm
i=1
exo$A = 0
while (i<length(exo$RightAscension)) {
temp = strsplit(exo$RightAscension, split = " ")[[i]]
temp_d = strsplit(exo$Declination, split = " ")[[i]]
exo$A[i] = (as.numeric(temp[1])*15) + (as.numeric(temp[2])*0.25) + (as.numeric(temp[3])*0.004166)
exo$B[i] = (abs(as.numeric(temp_d[1])) + (as.numeric(temp_d[2])/60) + (as.numeric(temp_d[3])/3600)) * sign(as.numeric(temp_d[1]))
exo$X[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * cos(exo$A[i])
exo$Y[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * sin(exo$A[i])
exo$Z[i] = exo$DistFromSunParsec[i] * sin(exo$B[i])
i=i+1
}
#Plot the scatterplot and produce an animation (changing the angle with each image)...
y=0
saveGIF(while (y < 360) {
scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="Local Neighbourhood",
axis = F,
grid = F,
box = T,
angle = y,
cex.symbols = exo$RadiusJpt)
y=y+1
}, movie.name = "exo.gif", interval = 0.1, convert = "convert", ani.width = 800,
ani.height = 800)
View(exo)
View(exo)
exo = exo[exo$RadiusJpt > 6,]
exo = read.csv('oec.csv')
#Get rid of planets with missing data...
ex = is.na(exo$RightAscension) | is.na(exo$Declination) | is.na(exo$DistFromSunParsec) | is.na(exo$RadiusJpt)
exo = exo[!ex,]
#Get rid of the planets wtih really extreme distances or sizes (purely for aesthetic reasons)...
exo = exo[exo$DistFromSunParsec < 2000,]
exo = exo[exo$RadiusJpt > 6,]
exo = read.csv('oec.csv')
#Get rid of planets with missing data...
ex = is.na(exo$RightAscension) | is.na(exo$Declination) | is.na(exo$DistFromSunParsec) | is.na(exo$RadiusJpt)
exo = exo[!ex,]
#Get rid of the planets wtih really extreme distances or sizes (purely for aesthetic reasons)...
exo = exo[exo$DistFromSunParsec < 2000,]
View(exo)
exo = exo[exo$RadiusJpt < 6,]
#Change to characters...
exo$RightAscension = as.character(exo$RightAscension)
exo$Declination = as.character(exo$Declination)
#Strip out relevant data and convert from RA and declination to cartesian coordiates...
#Conversion taken from http://fmwriters.com/Visionback/Issue14/wbputtingstars.htm
i=1
exo$A = 0
while (i<length(exo$RightAscension)) {
temp = strsplit(exo$RightAscension, split = " ")[[i]]
temp_d = strsplit(exo$Declination, split = " ")[[i]]
exo$A[i] = (as.numeric(temp[1])*15) + (as.numeric(temp[2])*0.25) + (as.numeric(temp[3])*0.004166)
exo$B[i] = (abs(as.numeric(temp_d[1])) + (as.numeric(temp_d[2])/60) + (as.numeric(temp_d[3])/3600)) * sign(as.numeric(temp_d[1]))
exo$X[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * cos(exo$A[i])
exo$Y[i] = (exo$DistFromSunParsec[i] * cos(exo$B[i])) * sin(exo$A[i])
exo$Z[i] = exo$DistFromSunParsec[i] * sin(exo$B[i])
i=i+1
}
#Plot the scatterplot and produce an animation (changing the angle with each image)...
y=0
saveGIF(while (y < 360) {
scatterplot3d(exo$X, exo$Y, exo$Z, pch=16,
highlight.3d=TRUE,
type="p",
main="Local Neighbourhood",
axis = F,
grid = F,
box = T,
angle = y,
cex.symbols = exo$RadiusJpt)
y=y+1
}, movie.name = "exo.gif", interval = 0.1, convert = "convert", ani.width = 800,
ani.height = 800)
