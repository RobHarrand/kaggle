{
    "contents" : "# 22/01/16 Sens 90%, Spec 70%\n\nlibrary(caret) #Classification and regression training\n\ntrain = read.csv(\"Data\\\\train.csv\", header = TRUE)\ntest = read.csv(\"Data\\\\test.csv\", header = TRUE)\n\ntest$Survived = 0\n\ncombi = rbind(train, test)\n\ncombi$Name = as.character(combi$Name)\n\n#combi$Surname = sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})\n\ncombi$Title = sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})\ncombi$Title = sub(' ', '', combi$Title)\n\n# combi$Surname = as.factor(combi$Surname)\n# surnames = as.data.frame(table(combi$Surname))\n\ncombi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir', 'Col', 'Jonkheer', 'Rev', 'Dr')] = 'Mr'\ncombi$Title[combi$Title %in% c('Ms', 'Mlle')] <- 'Miss'\ncombi$Title[combi$Title %in% c('Lady', 'the Countess', 'Mme', 'Dona')] <- 'Mrs'\ncombi$Title[grep(\"Leader\", combi$Name)] = 'Mrs'\ncombi$Title <- factor(combi$Title)\n\ncombi$Survived = factor(combi$Survived)\ncombi$Pclass = factor(combi$Pclass)\n\ncombi$family_size = combi$SibSp + combi$Parch + 1\n\ncombi$HasFamily = ifelse(combi$family_size > 1, 1, 0)\ncombi$HasFamily = as.factor(combi$HasFamily)\n\npredicted_age = train(Age ~ Pclass + Sex + SibSp + Parch + Fare + Title,\n                       data=combi[!is.na(combi$Age),], method=\"gbm\")\n\ncombi$Age[is.na(combi$Age)] = predict(predicted_age, combi[is.na(combi$Age),])\n\ncombi$Embarked[combi$Embarked == \"\"] = 'S'\ncombi$Embarked = droplevels(combi$Embarked)\n\ncombi$Survived = as.character(combi$Survived)\ncombi$Survived[combi$Survived == '0'] = 'Perished'\ncombi$Survived[combi$Survived == '1'] = 'Survived'\ncombi$Survived = as.factor(combi$Survived)\n\ntrain_new = combi[1:891,]\ntest_new = combi[892:1309,]\ntest_new$Survived = NULL\n\n\n# gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),\n#                         n.trees = (1:30)*50,\n#                         shrinkage = 0.1,\n#                         n.minobsinnode = 20)\n# \n# set.seed(1)\n# fitControl = trainControl(method = \"repeatedcv\", number = 10, repeats = 20, summaryFunction = twoClassSummary, \n#                            classProbs = TRUE)\n# \n# model = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, \n#                     method = \"ctree\", \n#                     data = train_new,\n#                     #tuneGrid = gbmGrid,\n#                     trControl = fitControl,\n#                     metric = \"ROC\")\n# \n# getTrainPerf(model) #Internal CV performance\n# \n# install.packages('rattle')\n# library('rattle')\n# fancyRpartPlot(model$finalModel)\n# \n# plot(model$finalModel)\n# \n# pred = predict(model,test_new)\n# \n# predictions = data.frame(test_new$PassengerId, pred)\n# colnames(predictions) = c(\"PassengerId\", \"Survived\")\n# \n# predictions$Survived = as.character(predictions$Survived)\n# predictions$Survived[predictions$Survived == 'Perished'] = '0'\n# predictions$Survived[predictions$Survived == 'Survived'] = '1'\n# predictions$Survived = as.factor(predictions$Survived)\n# \n# write.table(predictions, file = \"pred1.csv\", row.name=FALSE, sep = \",\")\n# \n# #https://triangleinequality.wordpress.com/2013/09/08/basic-feature-engineering-with-the-titanic-data/\n# \n# ---\n#     \n#         \n# set.seed(100) #Set seed to ensure reproducible results\n# my_control = trainControl(method = \"repeatedcv\", number = 10, repeats = 20, summaryFunction = twoClassSummary, classProbs = TRUE)\n# \n# library('caretEnsemble')\n# \n# model_list <- caretList(\n#     Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size,\n#     data = train_new,\n#     trControl=my_control,\n#     metric = 'ROC',\n#     weights = train_new$weight,\n#     methodList=c('glm', 'gbm', \"svmLinear\", \"rf\")\n# )\n# \n# model_list\n# \n# greedy_ensemble <- caretEnsemble(model_list)\n# summary(greedy_ensemble)\n# \n# pred_ens = predict(greedy_ensemble, newdata = test_new)\n# pred_ens = ifelse(pred_ens >= 0.5, 1, 0)\n# predictions_ens = data.frame(test_new$PassengerId, pred_ens)\n# colnames(predictions_ens) = c(\"PassengerId\", \"Survived\")\n# \n# write.table(predictions_ens, file = \"pred2.csv\", row.name=FALSE, sep = \",\")\n# \n# \n# \n\n\n\n\nlibrary('pROC')\n\nfitControl <- trainControl(method = \"repeatedcv\", number = 10, repeats = 20,\n                           summaryFunction=twoClassSummary, \n                           classProbs=T,\n                           savePredictions = T)\n\nmodel1 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new, \n               method = 'rf',\n               trControl = fitControl,\n               metric = \"ROC\")\n\n\n\nmodel2 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new, \n               method = 'gbm',\n               trControl = fitControl,\n               metric = \"ROC\",\n               verbose = F)\n\nmodel3 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new, \n               method = 'ctree',\n               trControl = fitControl,\n               metric = \"ROC\")\n\nmodel4 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new, \n               method = 'svmLinear',\n               trControl = fitControl,\n               metric = \"ROC\")\n\nmodel5 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new, \n               method = 'knn',\n               trControl = fitControl,\n               metric = \"ROC\")\n\nlength(model1$pred$obs)\nlength(model1$pred$Survived)\n\nplot.roc(model1$pred$obs, model1$pred$Survived)\n\nplot.roc(model2$pred$obs, model2$pred$Survived, add = T, col = 'red')\n\nplot.roc(model3$pred$obs, model3$pred$Survived, add = T, col = 'blue')\n\nplot.roc(model4$pred$obs, model4$pred$Survived, add = T, col = 'purple')\n\nplot.roc(model5$pred$obs, model5$pred$Survived, add = T, col = 'green')\n\nlegend(x=0.4, y=0.4, lty=c(1,1,1,1,1), legend = c(\"Random Forest\", \"GBM\", \"CTREE\", \"SVM\", \"KNN\"),\n       col = c(\"black\", \"red\", \"blue\", \"purple\", \"green\"))\n\nauc1 = auc(roc(model1$pred$obs, model1$pred$Survived))\nauc2 = auc(roc(model2$pred$obs, model2$pred$Survived))\nauc3 = auc(roc(model3$pred$obs, model3$pred$Survived))\nauc4 = auc(roc(model4$pred$obs, model4$pred$Survived))\nauc5 = auc(roc(model5$pred$obs, model5$pred$Survived))\n\naucs = data.frame(auc1, auc2, auc3, auc4, auc5)\n\nbarplot(as.matrix(aucs), main=\"Area Under Curve (ROC)\", names.arg=c(\"Random Forest\", \"GBM\", \"CTREE\", \"SVM\", \"KNN\"), \n        beside=TRUE, col=terrain.colors(5), ylim = c(0,1))\n\n\n#Generate lift curves,\nevalResults1 <- data.frame(Survived = model1$pred$obs[1:891])\nevalResults1$rf <- model1$pred$Survived[1:891]\n\nevalResults2 <- data.frame(Survived = model2$pred$obs[1:891])\nevalResults2$gbm <- model2$pred$Survived[1:891]\n\nevalResults3 <- data.frame(Survived = model3$pred$obs[1:891])\nevalResults3$ctree <- model3$pred$Survived[1:891]\n\nevalResults4 <- data.frame(Survived = model4$pred$obs[1:891])\nevalResults4$svm <- model4$pred$Survived[1:891]\n\nevalResults5 <- data.frame(Survived = model5$pred$obs[1:891])\nevalResults5$knn <- model5$pred$Survived[1:891]\n\ntrellis.par.set(caretTheme())\n\nliftData1 <- lift(Survived ~ rf, data = evalResults1, class = \"Survived\")\nliftData2 <- lift(Survived ~ gbm, data = evalResults2, class = \"Survived\")\nliftData3 <- lift(Survived ~ ctree, data = evalResults3, class = \"Survived\")\nliftData4 <- lift(Survived ~ svm, data = evalResults4, class = \"Survived\")\nliftData5 <- lift(Survived ~ knn, data = evalResults5, class = \"Survived\")\n\n#Plot lift curve,\nplot(liftData1, values = 50, auto.key = list(columns = 3, lines = TRUE, points = FALSE),lwd = 3)\ncurve(liftData2, values = 50, auto.key = list(columns = 3, lines = TRUE, points = FALSE),lwd = 3)\n\n\n\n\n\n ",
    "created" : 1453470933346.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1230046752",
    "id" : "8935A9BC",
    "lastKnownWriteTime" : 1471017463,
    "path" : "C:/Users/rob.harrand/Desktop/WORK/Kaggle/Titanic/Titanic.R",
    "project_path" : "Titanic.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}