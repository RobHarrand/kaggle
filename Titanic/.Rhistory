tuneGrid = gbmGrid,
trControl = fitControl,
metric = "ROC")
getTrainPerf(model) #Internal CV performance
pred = predict(model,test_new)
predictions = data.frame(test_new$PassengerId, pred)
colnames(predictions) = c("PassengerId", "Survived")
predictions$Survived = as.character(predictions$Survived)
predictions$Survived[predictions$Survived == 'Perished'] = '0'
predictions$Survived[predictions$Survived == 'Survived'] = '1'
predictions$Survived = as.factor(predictions$Survived)
model
write.table(predictions, file = "pred1.csv", row.name=FALSE, sep = ",")
train = read.csv("Data\\train.csv", header = TRUE)
View(train)
grep('lady', train$Name)
grep('lord', train$Name)
grep('Lord', train$Name)
test = read.csv("Data\\test.csv", header = TRUE)
grep('Lord', test$Name)
grep('Lady', test$Name)
grep('Baroness', test$Name)
grep('Baroness', train$Name)
grep('Countess', train$Name)
library(caret) #Classification and regression training
train = read.csv("Data\\train.csv", header = TRUE)
test = read.csv("Data\\test.csv", header = TRUE)
test$Survived = 0
combi = rbind(train, test)
combi$Name = as.character(combi$Name)
#combi$Surname = sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combi$Title = sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combi$Title = sub(' ', '', combi$Title)
# combi$Surname = as.factor(combi$Surname)
# surnames = as.data.frame(table(combi$Surname))
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir', 'Col', 'Jonkheer', 'Rev', 'Dr')] = 'Mr'
combi$Title[combi$Title %in% c('Ms', 'Mlle')] <- 'Miss'
combi$Title[combi$Title %in% c('Lady', 'the Countess', 'Mme', 'Dona')] <- 'Mrs'
combi$Title[grep("Leader", combi$Name)] = 'Mrs'
combi$Title <- factor(combi$Title)
combi$Survived = factor(combi$Survived)
combi$Pclass = factor(combi$Pclass)
combi$family_size = combi$SibSp + combi$Parch + 1
combi$HasFamily = ifelse(combi$family_size > 1, 1, 0)
combi$HasFamily = as.factor(combi$HasFamily)
predicted_age = train(Age ~ Pclass + Sex + SibSp + Parch + Fare + Title,
data=combi[!is.na(combi$Age),], method="gbm")
combi$Age[is.na(combi$Age)] = predict(predicted_age, combi[is.na(combi$Age),])
combi$Embarked[combi$Embarked == ""] = 'S'
combi$Embarked = droplevels(combi$Embarked)
combi$Survived = as.character(combi$Survived)
combi$Survived[combi$Survived == '0'] = 'Perished'
combi$Survived[combi$Survived == '1'] = 'Survived'
combi$Survived = as.factor(combi$Survived)
train_new = combi[1:891,]
test_new = combi[892:1309,]
test_new$Survived = NULL
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
set.seed(1)
fitControl = trainControl(method = "repeatedcv", number = 10, repeats = 20, summaryFunction = twoClassSummary,
classProbs = TRUE)
model = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily,
method = "ctree",
data = train_new,
#tuneGrid = gbmGrid,
trControl = fitControl,
metric = "ROC")
getTrainPerf(model) #Internal CV performance
library('rattle')
getTrainPerf(model) #Internal CV performance
getTrainPerf(model) #Internal CV performance
fancyRpartPlot(model$finalModel)
plot(model$finalModel)
model$finalModel
fancyRpartPlot
fancyRpartPlot(model$finalModel)
fancyRpartPlot(model)
drawTreeNodes(model$finalModel)
drawTreeNodes(model@finalModel)
drawTreeNodes(model)@finalModel)
plot(model$finalModel)
?plot
fancyRpartPlot(model$finalModel)
model$finalModel
fancyRpartPlot(model$finalModel)
library("rattle", lib.loc="C:/Program Files/Microsoft/MRO/R-3.2.4/library")
fancyRpartPlot(model$finalModel)
m = model$finalModel
fancyRpartPlot(m)
m
model$finalModel[1]
model$finalModel
model = train(Survived ~ Pclass + Sex + Age + SibSp + Parch,
method = "ctree",
data = train_new,
#tuneGrid = gbmGrid,
trControl = fitControl,
metric = "ROC")
getTrainPerf(model) #Internal CV performance
model$finalModel
plot(model$finalModel)
fancyRpartPlot(model$finalModel)
library(rpart.plot)
install.packages('rpart.plot')
library(rpart.plot)
rpart.plot(model$finalModel)
model = train(Survived ~ Pclass + Sex + Age + SibSp + Parch,
method = "rpart",
data = train_new,
#tuneGrid = gbmGrid,
trControl = fitControl,
metric = "ROC")
getTrainPerf(model) #Internal CV performance
rpart.plot(model$finalModel)
fancyRpartPlot(model$finalModel)
model = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + HasFamily + Title,
method = "rpart",
data = train_new,
#tuneGrid = gbmGrid,
trControl = fitControl,
metric = "ROC")
fancyRpartPlot(model$finalModel)
rpart.plot(model$finalModel)
fancyRpartPlot(model$finalModel)
rpart.plot(model$finalModel)
?rpart
?rpart.plot
rpart.plot(model$finalModel, type = 1)
rpart.plot(model$finalModel, type = 2)
rpart.plot(model$finalModel, type = 3)
rpart.plot(model$finalModel, type = 4)
rpart.plot(model$finalModel)
?rpart.plot
rpart.plot(model$finalModel, extra = 4)
rpart.plot(model$finalModel, extra = 8)
?rpart.plot
rpart.plot(model$finalModel, extra = 108)
rpart.plot(model$finalModel, extra = 8)
?rpart.plot
rpart.plot(model$finalModel, extra = 8, branch = 1)
model = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + HasFamily + Title,
method = "rpart",
data = train_new,
#tuneGrid = gbmGrid,
trControl = fitControl,
metric = "ROC")
rpart.plot(model$finalModel, extra = 8, branch = 1)
View(train_new)
library(caret) #Classification and regression training
train = read.csv("Data\\train.csv", header = TRUE)
test = read.csv("Data\\test.csv", header = TRUE)
test$Survived = 0
combi = rbind(train, test)
combi$Name = as.character(combi$Name)
combi$Title = sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combi$Title = sub(' ', '', combi$Title)
# combi$Surname = as.factor(combi$Surname)
# surnames = as.data.frame(table(combi$Surname))
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir', 'Col', 'Jonkheer', 'Rev', 'Dr')] = 'Mr'
combi$Title[combi$Title %in% c('Ms', 'Mlle')] <- 'Miss'
combi$Title[combi$Title %in% c('Lady', 'the Countess', 'Mme', 'Dona')] <- 'Mrs'
combi$Title[grep("Leader", combi$Name)] = 'Mrs'
combi$Title <- factor(combi$Title)
combi$Survived = factor(combi$Survived)
combi$Pclass = factor(combi$Pclass)
combi$family_size = combi$SibSp + combi$Parch + 1
combi$HasFamily = ifelse(combi$family_size > 1, 1, 0)
combi$HasFamily = as.factor(combi$HasFamily)
predicted_age = train(Age ~ Pclass + Sex + SibSp + Parch + Fare + Title,
data=combi[!is.na(combi$Age),], method="gbm")
combi$Age[is.na(combi$Age)] = predict(predicted_age, combi[is.na(combi$Age),])
combi$Embarked[combi$Embarked == ""] = 'S'
combi$Embarked = droplevels(combi$Embarked)
combi$Survived = as.character(combi$Survived)
combi$Survived[combi$Survived == '0'] = 'Perished'
combi$Survived[combi$Survived == '1'] = 'Survived'
combi$Survived = as.factor(combi$Survived)
train_new = combi[1:891,]
test_new = combi[892:1309,]
test_new$Survived = NULL
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
set.seed(1)
fitControl = trainControl(method = "repeatedcv", number = 10, repeats = 20, summaryFunction = twoClassSummary,
classProbs = TRUE)
model = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily,
method = "ctree",
data = train_new,
#tuneGrid = gbmGrid,
trControl = fitControl,
metric = "ROC")
getTrainPerf(model) #Internal CV performance
install.packages('rattle')
library('rattle')
fancyRpartPlot(model$finalModel)
plot(model$finalModel)
library('pROC')
model1 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch, data = train,
method = 'rf',
trControl = fitControl,
metric = "ROC")
model1 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch, data = train_new,
method = 'rf',
trControl = fitControl,
metric = "ROC")
model2 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch, data = train_new,
method = 'gbm',
trControl = fitControl,
metric = "ROC",
verbose = F)
model3 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch, data = train_new,
method = 'ctree',
trControl = fitControl,
metric = "ROC")
model4 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch, data = train_new,
method = 'glm',
trControl = fitControl,
metric = "ROC")
model5 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch, data = train_new,
method = 'knn',
trControl = fitControl,
metric = "ROC")
plot.roc(model1$pred$obs,
model1$pred$Survived)
plot.roc(model2$pred$obs,
model2$pred$Survived, add = T, col = 'red')
plot.roc(model3$pred$obs,
model3$pred$Survived, add = T, col = 'blue')
plot.roc(model4$pred$obs,
model4$pred$Survived, add = T, col = 'purple')
plot.roc(model5$pred$obs,
model5$pred$Survived, add = T, col = 'green')
legend(x=0.4, y=0.4, lty=c(1,1,1,1,1), legend = c("Random Forest", "GBM", "CTREE", "GLM", "KNN"),
col = c("black", "red", "blue", "purple", "green"))
model1$pred$obs
model1
model1$pred
View(train_new)
train = read.csv("Data\\train.csv", header = TRUE)
test = read.csv("Data\\test.csv", header = TRUE)
test$Survived = 0
combi = rbind(train, test)
combi$Name = as.character(combi$Name)
#combi$Surname = sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combi$Title = sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combi$Title = sub(' ', '', combi$Title)
# combi$Surname = as.factor(combi$Surname)
# surnames = as.data.frame(table(combi$Surname))
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir', 'Col', 'Jonkheer', 'Rev', 'Dr')] = 'Mr'
combi$Title[combi$Title %in% c('Ms', 'Mlle')] <- 'Miss'
combi$Title[combi$Title %in% c('Lady', 'the Countess', 'Mme', 'Dona')] <- 'Mrs'
combi$Title[grep("Leader", combi$Name)] = 'Mrs'
combi$Title <- factor(combi$Title)
combi$Survived = factor(combi$Survived)
combi$Pclass = factor(combi$Pclass)
combi$family_size = combi$SibSp + combi$Parch + 1
combi$HasFamily = ifelse(combi$family_size > 1, 1, 0)
combi$HasFamily = as.factor(combi$HasFamily)
predicted_age = train(Age ~ Pclass + Sex + SibSp + Parch + Fare + Title,
data=combi[!is.na(combi$Age),], method="gbm")
combi$Age[is.na(combi$Age)] = predict(predicted_age, combi[is.na(combi$Age),])
combi$Embarked[combi$Embarked == ""] = 'S'
combi$Embarked = droplevels(combi$Embarked)
combi$Survived = as.character(combi$Survived)
combi$Survived[combi$Survived == '0'] = 'Perished'
combi$Survived[combi$Survived == '1'] = 'Survived'
combi$Survived = as.factor(combi$Survived)
train_new = combi[1:891,]
test_new = combi[892:1309,]
test_new$Survived = NULL
model1 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new,
method = 'rf',
trControl = fitControl,
metric = "ROC")
fitControl <- trainControl(method = "cv",
summaryFunction=twoClassSummary,
classProbs=T,
savePredictions = T)
model1 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new,
method = 'rf',
trControl = fitControl,
metric = "ROC")
model2 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new,
method = 'gbm',
trControl = fitControl,
metric = "ROC",
verbose = F)
model3 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new,
method = 'ctree',
trControl = fitControl,
metric = "ROC")
model4 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new,
method = 'glm',
trControl = fitControl,
metric = "ROC")
model5 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new,
method = 'knn',
trControl = fitControl,
metric = "ROC")
warnings()
plot.roc(model1$pred$obs,
model1$pred$Survived)
plot.roc(model2$pred$obs,
model2$pred$Survived, add = T, col = 'red')
plot.roc(model3$pred$obs,
model3$pred$Survived, add = T, col = 'blue')
plot.roc(model4$pred$obs,
model4$pred$Survived, add = T, col = 'purple')
plot.roc(model5$pred$obs,
model5$pred$Survived, add = T, col = 'green')
legend(x=0.4, y=0.4, lty=c(1,1,1,1,1), legend = c("Random Forest", "GBM", "CTREE", "GLM", "KNN"),
col = c("black", "red", "blue", "purple", "green"))
model1$pred$obs
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 20,
summaryFunction=twoClassSummary,
classProbs=T,
savePredictions = T)
install.packages('fselector')
install.packages('Fselector')
importance <- varImp(model1, scale=FALSE)
importance
importance1 <- varImp(model1, scale=FALSE)
importance2 <- varImp(model2, scale=FALSE)
importance3 <- varImp(model3, scale=FALSE)
importance4 <- varImp(model4, scale=FALSE)
importance5 <- varImp(model5, scale=FALSE)
importance1 <- varImp(model1, scale=FALSE)
importance2 <- varImp(model2, scale=FALSE)
importance3 <- varImp(model3, scale=FALSE)
importance3
model3
model3
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 20,
summaryFunction=twoClassSummary,
classProbs=T,
savePredictions = T)
model1 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new,
method = 'rf',
trControl = fitControl,
metric = "ROC")
model2 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new,
method = 'gbm',
trControl = fitControl,
metric = "ROC",
verbose = F)
model3 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new,
method = 'ctree',
trControl = fitControl,
metric = "ROC")
model4 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new,
method = 'glm',
trControl = fitControl,
metric = "ROC")
model5 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new,
method = 'knn',
trControl = fitControl,
metric = "ROC")
warnings()
model4 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new,
method = 'svm',
trControl = fitControl,
metric = "ROC")
model4 = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + family_size + HasFamily, data = train_new,
method = 'svmLinear',
trControl = fitControl,
metric = "ROC")
model4
importance1 <- varImp(model1, scale=FALSE)
importance2 <- varImp(model2, scale=FALSE)
importance3 <- varImp(model3, scale=FALSE)
importance4 <- varImp(model4, scale=FALSE)
importance5 <- varImp(model5, scale=FALSE)
plot.roc(model1$pred$obs,
model1$pred$Survived)
plot.roc(model2$pred$obs,
model2$pred$Survived, add = T, col = 'red')
plot.roc(model3$pred$obs,
model3$pred$Survived, add = T, col = 'blue')
plot.roc(model4$pred$obs,
model4$pred$Survived, add = T, col = 'purple')
plot.roc(model5$pred$obs,
model5$pred$Survived, add = T, col = 'green')
legend(x=0.4, y=0.4, lty=c(1,1,1,1,1), legend = c("Random Forest", "GBM", "CTREE", "SVM", "KNN"),
col = c("black", "red", "blue", "purple", "green"))
?auc
auc(model1)
roc1 = roc(model1$pred$obs, model1$pred$Survived)
roc1
auc1 = auc(roc(model1$pred$obs, model1$pred$Survived))
auc1
aucs = data.frame(auc1, auc2, auc3, auc4, auc5)
auc2 = auc(roc(model2$pred$obs, model2$pred$Survived))
auc3 = auc(roc(model3$pred$obs, model3$pred$Survived))
auc4 = auc(roc(model4$pred$obs, model4$pred$Survived))
auc5 = auc(roc(model5$pred$obs, model5$pred$Survived))
aucs = data.frame(auc1, auc2, auc3, auc4, auc5)
barplot(aucs)
barplot(as.matrix(aucs))
barplot(as.matrix(auc), main="Algorithm performances", names.arg=c("AUC", "Sensitivity", "Specificity"),
beside=TRUE, col=terrain.colors(6), ylim = c(0,1))
barplot(as.matrix(auc), main="Algorithm performances", beside=TRUE, col=terrain.colors(5), ylim = c(0,1))
barplot(as.matrix(aucs), main="Algorithm performances", beside=TRUE, col=terrain.colors(5), ylim = c(0,1))
barplot(as.matrix(aucs), main="Algorithm performances", names.arg=c("Random Forest", "GBM", "CTREE", "SVM", "KNN"),
beside=TRUE, col=terrain.colors(5), ylim = c(0,1))
barplot(as.matrix(aucs), main="Area Under Curve (ROC)", names.arg=c("Random Forest", "GBM", "CTREE", "SVM", "KNN"),
beside=TRUE, col=terrain.colors(5), ylim = c(0,1))
evalResults <- data.frame(Survived = train_new$Survived)
evalResults
evalResults$rf <- predict(model1$model, newdata = train_new, type = "prob")[,"Survived"]
evalResults <- data.frame(Survived = train_new$Survived)
evalResults$rf <- model1$pred$obs
model1$pred$obs
length(model1$pred$obs)
length(model1$pred$Survived)
evalResults <- data.frame(Survived = model1$pred$Survived)
evalResults$rf <- model1$pred$obs
liftData <- lift(Survived ~ rf, data = evalResults, class = "Survived")
trellis.par.set(caretTheme())
liftData <- lift(Survived ~ rf, data = evalResults, class = "Survived")
lift(Survived ~ rf, data = evalResults, class = "Survived")
View(evalResults)
str(evalResults)
View(evalResults)
model1$pred$Survived
evalResults <- data.frame(Survived = model1$pred$obs)
evalResults$rf <- model1$pred$Survived
liftData <- lift(Survived ~ rf, data = evalResults, class = "Survived")
plot(liftData, values = 50, auto.key = list(columns = 3, lines = TRUE, points = FALSE),lwd = 3)
model1$pred$obs
table(model2$pred$obs)
table(model1$pred$obs)
liftData <- lift(Survived ~ rf, data = evalResults, class = "Survived")
liftData <- lift(Survived ~ gbm, data = evalResults, class = "Survived")
liftData <- lift(Survived ~ ctree, data = evalResults, class = "Survived")
liftData <- lift(Survived ~ svm, data = evalResults, class = "Survived")
liftData <- lift(Survived ~ knn, data = evalResults, class = "Survived")
liftData <- lift(Survived ~ rf, data = evalResults1, class = "Survived")
liftData <- lift(Survived ~ gbm, data = evalResults2, class = "Survived")
liftData <- lift(Survived ~ ctree, data = evalResults3, class = "Survived")
liftData <- lift(Survived ~ svm, data = evalResults4, class = "Survived")
liftData <- lift(Survived ~ knn, data = evalResults5, class = "Survived")
#Generate lift curves,
evalResults1 <- data.frame(Survived = model1$pred$obs)
evalResults$rf <- model1$pred$Survived
evalResults2 <- data.frame(Survived = model2$pred$obs)
evalResults$gbm <- model2$pred$Survived
evalResults3 <- data.frame(Survived = model3$pred$obs)
evalResults$ctree <- model3$pred$Survived
evalResults4 <- data.frame(Survived = model4$pred$obs)
evalResults$svm <- model4$model4$pred$Survived
evalResults5 <- data.frame(Survived = model5$pred$obs)
evalResults$knn <- model5$pred$Survived
trellis.par.set(caretTheme())
liftData <- lift(Survived ~ rf, data = evalResults1, class = "Survived")
liftData <- lift(Survived ~ gbm, data = evalResults2, class = "Survived")
liftData <- lift(Survived ~ ctree, data = evalResults3, class = "Survived")
liftData <- lift(Survived ~ svm, data = evalResults4, class = "Survived")
liftData <- lift(Survived ~ knn, data = evalResults5, class = "Survived")
#Generate lift curves,
evalResults1 <- data.frame(Survived = model1$pred$obs)
evalResults1$rf <- model1$pred$Survived
evalResults2 <- data.frame(Survived = model2$pred$obs)
evalResults2$gbm <- model2$pred$Survived
evalResults3 <- data.frame(Survived = model3$pred$obs)
evalResults3$ctree <- model3$pred$Survived
evalResults4 <- data.frame(Survived = model4$pred$obs)
evalResults4$svm <- model4$model4$pred$Survived
evalResults5 <- data.frame(Survived = model5$pred$obs)
evalResults5$knn <- model5$pred$Survived
trellis.par.set(caretTheme())
liftData <- lift(Survived ~ rf, data = evalResults1, class = "Survived")
liftData <- lift(Survived ~ gbm, data = evalResults2, class = "Survived")
#Generate lift curves,
evalResults1 <- data.frame(Survived = model1$pred$obs[1:891])
evalResults1$rf <- model1$pred$Survived[1:891]
evalResults2 <- data.frame(Survived = model2$pred$obs[1:891])
evalResults2$gbm <- model2$pred$Survived[1:891]
evalResults3 <- data.frame(Survived = model3$pred$obs[1:891])
evalResults3$ctree <- model3$pred$Survived[1:891]
evalResults4 <- data.frame(Survived = model4$pred$obs[1:891])
evalResults4$svm <- model4$model4$pred$Survived[1:891]
evalResults5 <- data.frame(Survived = model5$pred$obs[1:891])
evalResults5$knn <- model5$pred$Survived[1:891]
liftData <- lift(Survived ~ rf, data = evalResults1, class = "Survived")
liftData <- lift(Survived ~ gbm, data = evalResults2, class = "Survived")
liftData <- lift(Survived ~ ctree, data = evalResults3, class = "Survived")
liftData <- lift(Survived ~ svm, data = evalResults4, class = "Survived")
liftData <- lift(Survived ~ knn, data = evalResults5, class = "Survived")
evalResults4$svm
evalResults4 <- data.frame(Survived = model4$pred$obs[1:891])
evalResults4$svm <- model4$pred$Survived[1:891]
liftData <- lift(Survived ~ svm, data = evalResults4, class = "Survived")
liftData <- lift(Survived ~ knn, data = evalResults5, class = "Survived")
plot(liftData, values = 50, auto.key = list(columns = 3, lines = TRUE, points = FALSE),lwd = 3)
liftData1 <- lift(Survived ~ rf, data = evalResults1, class = "Survived")
liftData2 <- lift(Survived ~ gbm, data = evalResults2, class = "Survived")
liftData3 <- lift(Survived ~ ctree, data = evalResults3, class = "Survived")
liftData4 <- lift(Survived ~ svm, data = evalResults4, class = "Survived")
liftData5 <- lift(Survived ~ knn, data = evalResults5, class = "Survived")
plot(liftData1, values = 50, auto.key = list(columns = 3, lines = TRUE, points = FALSE),lwd = 3)
lines(liftData2, values = 50, auto.key = list(columns = 3, lines = TRUE, points = FALSE),lwd = 3)
plot(liftData1, values = 50, auto.key = list(columns = 3, lines = TRUE, points = FALSE),lwd = 3)
plot(liftData2, values = 50, auto.key = list(columns = 3, lines = TRUE, points = FALSE),lwd = 3, add = T)
plot(liftData1, values = 50, auto.key = list(columns = 3, lines = TRUE, points = FALSE),lwd = 3)
plot(liftData2, values = 50, auto.key = list(columns = 3, lines = TRUE, points = FALSE),lwd = 3, add = T)
plot(liftData1, values = 50, auto.key = list(columns = 3, lines = TRUE, points = FALSE),lwd = 3)
curve(liftData2, values = 50, auto.key = list(columns = 3, lines = TRUE, points = FALSE),lwd = 3)
